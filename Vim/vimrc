execute pathogen#infect()
syntax on
filetype plugin indent on
"call pathogen#infect()
"call pathogen#helptags()
set showmatch
set encoding=utf-8
scriptencoding utf-8
set termencoding=utf-8
set background=dark
inoremap jj <ESC>
"let base16colorspace=256  " Access colors present in 256 colorspace
"colorscheme base16-ocean
colorscheme base16-ocean
" Evaluate Clojure buffers on load
autocmd BufRead *.clj try | silent! Require | catch /^Fireplace/ | endtry
" Defaults to zero
let g:clojure_align_multiline_strings = 1
" Defaults to zero
let g:clojure_align_subforms = 1
let g:jsx_ext_required = 1 " Allow JSX in normal JS files
"
if has('nvim')
      nmap <bs> :<c-u>TmuxNavigateLeft<cr>
endif

if filereadable(expand("~/.vimrc_background"))
    let base16colorspace=256
    source ~/.vimrc_background
endif

"if has("gui_macvim")
    "colorscheme lucario
    "colorscheme apprentice
"endif

let g:indent_guides_auto_colors = 1
let g:indent_guides_enable_on_vim_startup = 1

"autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red   ctermbg=3
"autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=4



" ================ General Config ====================
"set number                      "Line numbers are good
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
"set showmode                    "Show current mode down the bottom
"set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
nnoremap ; :
vnoremap ; :
set autoread                    " Reload on outside file change
set hidden
nmap <leader>w :w!<cr>          "Fast Saving! leader+w
set cmdheight=1
set hid                         "Buffer becomes hidden when abandoned
set lazyredraw                  " Dont redraw while exec macros (performance)
set mat=2                       "Num of 10ths of a second to blink over matching brackets
set foldcolumn=1                "Little extra margin on left
syntax on
let mapleader=","
set noswapfile
set pastetoggle=<F2>


" ===== Buffers and Tabs and Splits Oh My! =====
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <leader><leader> <c-^> 
noremap <leader>v <C-w>v        
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>		
map <leader>tc :tabclose<cr>	
map <leader>tm :tabmove			
map <leader>t<leader> :tabnext	

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/	
map <leader>cd :cd %:p:h<cr>:pwd<cr>			

try	"Specify behaviors when switching between buffers
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

map <leader>l :bnext<cr>       
map <leader>h :bprevious<cr> 
nmap <D-1> <Plug>BufTabLine.Go(1)
nmap <D-2> <Plug>BufTabLine.Go(2)
nmap <D-3> <Plug>BufTabLine.Go(3)
nmap <D-4> <Plug>BufTabLine.Go(4)
nmap <D-5> <Plug>BufTabLine.Go(5)
nmap <D-6> <Plug>BufTabLine.Go(6)
nmap <D-7> <Plug>BufTabLine.Go(7)
nmap <D-8> <Plug>BufTabLine.Go(8)
nmap <D-9> <Plug>BufTabLine.Go(9)
nmap <D-0> <Plug>BufTabLine.Go(10)
let g:buftabline_indicators = 1
let g:buftabline_numbers = 2

" ================ Indentation ======================
set autoindent
set smartindent
set smarttab
set shiftround " tab / shifting moves to closest tabstop
"set shiftwidth=4
set softtabstop=0 " was 0
"set tabstop=4 "was 4
set expandtab
set textwidth=100
set sw=4
set ts=4
:autocmd Filetype ruby set softtabstop=2
:autocmd Filetype ruby set sw=2
:autocmd Filetype ruby set ts=2

:autocmd Filetype scala set softtabstop=2
:autocmd Filetype scala set sw=2
:autocmd Filetype scala set ts=2
" Highlight the first column after the text width
"if exists('&colorcolumn')
   "set colorcolumn=+1
"endif

nnoremap P P=`]<C-o>        

set nowrap                      "Don't wrap lines
set linebreak                   "Wrap lines at convenient points

" ================ Folds ============================
set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
"set nofoldenable        "dont fold by default
" Fold with triple curly braces, fill with spaces
if has('folding')
    set foldenable
    set foldmethod=marker
    set foldopen=hor,search,tag,undo
    set fillchars=diff:\ ,fold:\ ,vert:\
endif

set nobackup
if has('writebackup')
    set nowritebackup
endif

" ================ Completion =======================
set wildmode=list:longest
set wildmenu                   "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~     "stuff to ignore when tab completing
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

" ================ Scrolling ========================
set scrolloff=8             "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15    "was 15"
set sidescroll=1

" ================ Search ===========================
set incsearch               " Find the next match as we type the search
set hlsearch                " Highlight searches by default
set ignorecase              " Ignore case when searching...
set smartcase               " ...unless we type a capital
au FileType python setl sw=2 sts=2 et
au FileType javascript setl sw=2 sts=2 et




" Plugin Settings 

"Syntastic Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" Syntastic Settings For Vim-Go
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }
let g:go_list_type = "quickfix"


"Golang Configs
autocmd BufNewFile,BufRead *.go setlocal noexpandtab tabstop=4 shiftwidth=4 

" Vim-Go Settings
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
" YouCompleteMe Settings

"filetype plugin indent on
let g:syntastic_always_populate_loc_list = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_server_python_interpreter = "/usr/bin/python"
"let g:ycm_server_python_interpreter = "/usr/local/bin/python3
let g:ycm_global_ycm_extra_conf = "~/.vim/ycm_extra_conf.py"
let g:ycm_warning_symbol = '**'
let g:ycm_error_symbol = '~>'
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_auto_trigger = 1
"g:ycm_semantic_triggers = {
     ""\ 'elm' : ['.'],
     ""\}
" have nerdtree auto open when vim is passed a directory instead of filename
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | endif


" NerdTree Settings

map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let g:NERDTreeMinimalUI=1

let g:slime_target = "tmux"
let g:slime_no_mappings = 1

"xmap <c-c><c-c> <Plug>SlimeRegionSend
xmap <c-x>m <Plug>SlimeRegionSend
nmap <c-x>n <Plug>SlimeParagraphSend
nmap <c-x>v     <Plug>SlimeConfig

" Tmux-Navigator Settings
"let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 2
autocmd BufRead,BufNewFile *.cljs setlocal filetype=clojure


"nnoremap <silent> {c-h} :TmuxNavigateLeft<cr>
"nnoremap <silent> {c-j} :TmuxNavigateDown<cr>
"nnoremap <silent> {c-k} :TmuxNavigateUp<cr>
"nnoremap <silent> {c-l} :TmuxNavigateRight<cr>
"nnoremap <silent> {c-\} :TmuxNavigatePrevious<cr>

let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
 let g:rainbow_conf = {
    \   'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
    \   'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
    \   'operators': '_,_',
    \   'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
    \   'separately': {
    \       '*': {},
    \       'tex': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
    \       },
    \       'lisp': {
    \           'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
    \       },
    \       'vim': {
    \           'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
    \       },
    \       'html': {
    \           'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
    \       },
    \       'css': 0,
    \   }
    \}

" DelimitMate Settings
au FileType c,perl let b:delimitMate_eol_marker = ";""
" Turns on or off balancing of matching pairs  Value = 1 or 0 Default = 0
let delimitMate_balance_matchpairs = 1
"This option turns on/off the jumping over <CR> and <Space> expansions when
"inserting closing matchpairs. Read |delimitMateExpansion| for details.
let delimitMate_jump_expansion = 1
"This option turns on/off the expansion of <CR>. Read |delimitMateExpansion|
"for details. NOTE This feature requires that 'backspace' is either set to 2
"or
"has \"eol" and \"start" as part of its value.
let delimitMate_expand_cr = 1
"let delimitMate_expand_space = 1


" Emmet Setttings
let g:user_emmet_mode='inv' "enable all functions i think in: insert, Visual, Normal

"Enable just for html/css
let g:user_emmet_install_global = 0
"autocmd FileType html,css EmmetInstall
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : 'jsx',
\  },
\}

let g:user_emmet_settings = webapi#json#decode(
            \  join(readfile(expand('~/.snippets.json')), "\n"))

autocmd FileType html,css,javascript.jsx EmmetInstall

"Redefine trigger key.   // DEFAULT -> <C-Y>,
"Dont forget the trailing ',' // You dont have to include in custom keymap
let g:user_emmet_leader_key='<C-E>'

"NEW TRIGGER KEYMAP IS CONTROL + E THEN ,

"Adding Custom Snippets Through Web API
"Once Web API Installed Uncomment Next Line
"let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.snippets_custom.json')), \"\n"))
" LONG LINE ABOVE i EsCaPeD tHe \n which was wrapped in DoUbLe QoUtEs so delete the \ after the ,
" BeFoRe UnCoMeNtIiNg
" WEB API REPO URL BELOW // MUST INSTALL IT FIRST
" https://github.com/mattn/webapi-vim.git
" EMMET DOCS FOR CUSTOM SNIPPES JSON FILE BELOW
" http://docs.emmet.io/customization/snippets/





